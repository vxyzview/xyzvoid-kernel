name: Build XYZVoid Kernel

on:
  push:
    branches: [ linux-6.15.y ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ linux-6.15.y ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v6.15.0-xyzvoid.1)'
        required: false
        type: string
      enable_debug:
        description: 'Enable debug symbols'
        required: false
        type: boolean
        default: false

env:
  KERNEL_NAME: xyzvoid-kernel
  MAINTAINER: vxyzview
  KERNEL_VERSION: 6.15.y
  LLVM_VERSION: "20"
  CACHE_VERSION: v4

jobs:
  build-kernel:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@v2
      with:
        root-reserve-mb: 8192
        swap-size-mb: 4096
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 50

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          libncurses-dev \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          bc \
          kmod \
          cpio \
          initramfs-tools \
          wget \
          xz-utils \
          zstd \
          ccache \
          lld \
          python3-pip \
          rsync \
          pahole \
          dwarves

    - name: Install LLVM/Clang 20 (Latest Stable)
      run: |
        # Add LLVM 20 repository (latest stable as of June 2025)
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ env.LLVM_VERSION }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
        
        sudo apt-get update -qq
        
        # Install LLVM/Clang 20 toolchain
        sudo apt-get install -y --no-install-recommends \
          clang-${{ env.LLVM_VERSION }} \
          lld-${{ env.LLVM_VERSION }} \
          llvm-${{ env.LLVM_VERSION }} \
          llvm-${{ env.LLVM_VERSION }}-dev \
          clang-tools-${{ env.LLVM_VERSION }} \
          libc++1-${{ env.LLVM_VERSION }} \
          libc++abi1-${{ env.LLVM_VERSION }}
        
        # Set up alternatives for consistent toolchain access
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/llvm-objcopy llvm-objcopy /usr/bin/llvm-objcopy-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-${{ env.LLVM_VERSION }} 100
        sudo update-alternatives --install /usr/bin/llvm-ranlib llvm-ranlib /usr/bin/llvm-ranlib-${{ env.LLVM_VERSION }} 100
        
        # Verify installation
        echo "=== LLVM/Clang ${{ env.LLVM_VERSION }} Installation ==="
        clang --version
        ld.lld --version
        llvm-ar --version

    - name: Setup enhanced ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-x86_64-kernel-${{ env.LLVM_VERSION }}
        max-size: 6G
        save: true
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-x86_64-kernel-

    - name: Set build environment variables
      run: |
        echo "KERNEL_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "KERNEL_FULL_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "KERNEL_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Configure kernel for x86_64
      run: |
        export PATH="/usr/lib/ccache:$PATH"
        export CC="ccache clang"
        export CXX="ccache clang++"
        export HOSTCC="clang"
        export HOSTCXX="clang++"
        export LLVM=1
        export LLVM_IAS=1
        
        # Start with x86_64 defconfig
        make ARCH=x86_64 defconfig
        
        # Set kernel version and name
        scripts/config --set-str CONFIG_LOCALVERSION "-${{ env.KERNEL_NAME }}"
        
        # Performance optimizations
        scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
        scripts/config --enable CONFIG_LTO_CLANG_THIN
        scripts/config --enable CONFIG_CFI_CLANG
        scripts/config --enable CONFIG_FORTIFY_SOURCE
        scripts/config --enable CONFIG_STACKPROTECTOR_STRONG
        
        # Memory management optimizations
        scripts/config --enable CONFIG_SLAB_FREELIST_RANDOM
        scripts/config --enable CONFIG_SHUFFLE_PAGE_ALLOCATOR
        scripts/config --enable CONFIG_TRANSPARENT_HUGEPAGE
        scripts/config --enable CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS
        
        # Scheduler and timing optimizations
        scripts/config --enable CONFIG_PREEMPT_VOLUNTARY
        scripts/config --enable CONFIG_NO_HZ_IDLE
        scripts/config --enable CONFIG_HIGH_RES_TIMERS
        
        # Compression and storage optimizations
        scripts/config --enable CONFIG_ZSTD_COMPRESS
        scripts/config --enable CONFIG_LZ4_COMPRESS
        scripts/config --enable CONFIG_ZRAM
        scripts/config --enable CONFIG_ZSWAP
        scripts/config --enable CONFIG_ZSWAP_DEFAULT_ON
        scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT "lz4"
        scripts/config --set-str CONFIG_ZSWAP_ZPOOL_DEFAULT "zsmalloc"
        
        # Modern CPU features for x86_64
        scripts/config --enable CONFIG_X86_64
        scripts/config --enable CONFIG_64BIT
        scripts/config --enable CONFIG_X86_TSC
        scripts/config --enable CONFIG_X86_CMPXCHG64
        scripts/config --enable CONFIG_X86_CMOV
        scripts/config --enable CONFIG_X86_MCE
        scripts/config --enable CONFIG_X86_MSR
        scripts/config --enable CONFIG_X86_CPUID
        
        # Security features
        scripts/config --enable CONFIG_SECURITY
        scripts/config --enable CONFIG_SECURITY_DMESG_RESTRICT
        scripts/config --enable CONFIG_SECURITY_PERF_EVENTS_RESTRICT
        scripts/config --enable CONFIG_HARDENED_USERCOPY
        scripts/config --enable CONFIG_INIT_ON_ALLOC_DEFAULT_ON
        scripts/config --enable CONFIG_INIT_ON_FREE_DEFAULT_ON
        
        # Debug configuration based on input
        if [ "${{ github.event.inputs.enable_debug }}" = "true" ]; then
          scripts/config --enable CONFIG_DEBUG_INFO
          scripts/config --enable CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
          scripts/config --enable CONFIG_DEBUG_INFO_COMPRESSED_ZSTD
        else
          scripts/config --disable CONFIG_DEBUG_INFO
          scripts/config --disable CONFIG_DEBUG_KERNEL
          scripts/config --disable CONFIG_DEBUG_MISC
        fi
        
        # Finalize configuration
        make olddefconfig
        
        echo "=== Key Configuration Verification ==="
        grep -E "(CONFIG_LOCALVERSION|CONFIG_LTO_CLANG|CONFIG_CFI_CLANG|CONFIG_ZSTD)" .config

    - name: Build kernel x86_64
      run: |
        export PATH="/usr/lib/ccache:$PATH"
        export CC="ccache clang"
        export CXX="ccache clang++"
        export HOSTCC="clang"
        export HOSTCXX="clang++"
        export LLVM=1
        export LLVM_IAS=1
        
        # Optimized build flags for x86_64 (default, no v3 specific flags)
        export KCFLAGS="-O3 -march=x86-64 -mtune=generic -fno-semantic-interposition"
        export KCPPFLAGS="-O3 -march=x86-64"
        
        # Build kernel and modules
        make ARCH=x86_64 -j$(nproc) bzImage modules
        
        echo "=== Build Statistics ==="
        ccache --show-stats
        ls -la arch/x86/boot/bzImage

    - name: Install modules and create package
      run: |
        mkdir -p kernel-build/x86_64/{boot,lib/modules,usr/src}
        
        # Copy kernel image
        cp arch/x86/boot/bzImage kernel-build/x86_64/boot/vmlinuz-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        
        # Install modules
        make ARCH=x86_64 INSTALL_MOD_PATH=kernel-build/x86_64 modules_install
        
        # Copy configuration and system map
        cp .config kernel-build/x86_64/boot/config-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        cp System.map kernel-build/x86_64/boot/System.map-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        
        # Install headers for DKMS compatibility
        make ARCH=x86_64 INSTALL_HDR_PATH=kernel-build/x86_64/usr headers_install
        
        # Get the actual kernel version directory name
        KERNEL_VERSION_FULL=$(ls kernel-build/x86_64/lib/modules/ | head -n1)
        
        # Create proper symlinks for module build directory
        # Remove any existing build/source entries first
        rm -rf kernel-build/x86_64/lib/modules/$KERNEL_VERSION_FULL/build
        rm -rf kernel-build/x86_64/lib/modules/$KERNEL_VERSION_FULL/source
        
        # Create symlinks pointing to the kernel source (which won't exist on target system)
        # This is mainly for DKMS modules that need to know where to find kernel headers
        ln -sf /usr/src/linux-headers-$KERNEL_VERSION_FULL kernel-build/x86_64/lib/modules/$KERNEL_VERSION_FULL/build
        ln -sf /usr/src/linux-headers-$KERNEL_VERSION_FULL kernel-build/x86_64/lib/modules/$KERNEL_VERSION_FULL/source

    - name: Generate package metadata and installation script
      run: |
        cd kernel-build
        
        # Create comprehensive build information
        cat > x86_64/BUILD_INFO << EOF
        ================================
        XYZVoid Kernel Build Information
        ================================
        
        Kernel Name: ${{ env.KERNEL_NAME }}
        Version: ${{ env.KERNEL_VERSION }}
        Architecture: x86_64
        Maintainer: ${{ env.MAINTAINER }}
        
        Build Details:
        - Compiler: Clang/LLVM ${{ env.LLVM_VERSION }}
        - Build Date: ${{ env.BUILD_TIMESTAMP }}
        - Git Commit: ${{ env.KERNEL_FULL_COMMIT }}
        - Target: x86_64 (generic 64-bit)
        - Optimizations: -O3 -march=x86-64 -mtune=generic
        - LTO: Thin LTO enabled
        - CFI: Control Flow Integrity enabled
        - Security: FORTIFY_SOURCE, Stack protection, Hardened usercopy
        
        Features:
        - ZSTD/LZ4 compression support
        - ZSWAP with LZ4 compression (default on)
        - Transparent huge pages (always on)
        - High-resolution timers
        - Preemptive voluntary scheduling
        - Enhanced security and memory protection
        - Standard x86_64 CPU optimizations
        
        Package Contents:
        - boot/: Kernel image, config, System.map
        - lib/modules/: Kernel modules
        - usr/include/: Kernel headers for DKMS
        EOF
        
        # Create smart installation script
        cat > x86_64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        KERNEL_VERSION=$(ls "$SCRIPT_DIR/lib/modules/" | head -n1)
        KERNEL_NAME="xyzvoid-kernel"
        
        echo "========================================"
        echo "  XYZVoid Kernel Installation Script"
        echo "========================================"
        echo "Kernel version: $KERNEL_VERSION"
        echo
        
        # Check if running as root
        if [ "$EUID" -ne 0 ]; then
            echo "❌ Error: Please run as root (use sudo)"
            exit 1
        fi
        
        # Check system compatibility
        if [ "$(uname -m)" != "x86_64" ]; then
            echo "❌ Error: This kernel is only compatible with x86_64 systems"
            exit 1
        fi
        
        # Backup current kernel
        echo "🔄 Creating backup of current kernel..."
        BACKUP_DIR="/boot/backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        cp /boot/vmlinuz* "$BACKUP_DIR/" 2>/dev/null || true
        cp /boot/initrd* "$BACKUP_DIR/" 2>/dev/null || true
        cp /boot/initramfs* "$BACKUP_DIR/" 2>/dev/null || true
        echo "   Backup created: $BACKUP_DIR"
        
        # Install kernel files
        echo "📦 Installing kernel files..."
        cp -v boot/* /boot/
        cp -r lib/modules/* /lib/modules/
        [ -d usr/include ] && cp -r usr/include/* /usr/include/ 2>/dev/null || true
        
        # Create kernel headers directory for DKMS
        HEADERS_DIR="/usr/src/linux-headers-$KERNEL_VERSION"
        if [ -d usr/include ]; then
            echo "📋 Installing kernel headers for DKMS..."
            mkdir -p "$HEADERS_DIR"
            cp -r usr/include/* "$HEADERS_DIR/" 2>/dev/null || true
        fi
        
        # Update initramfs
        echo "🔧 Updating initramfs..."
        if command -v update-initramfs >/dev/null 2>&1; then
            echo "   Using update-initramfs (Debian/Ubuntu)"
            update-initramfs -c -k "$KERNEL_VERSION"
        elif command -v mkinitcpio >/dev/null 2>&1; then
            echo "   Using mkinitcpio (Arch Linux)"
            mkinitcpio -k "$KERNEL_VERSION" -g "/boot/initramfs-$KERNEL_VERSION.img"
        elif command -v dracut >/dev/null 2>&1; then
            echo "   Using dracut (Fedora/RHEL/openSUSE)"
            dracut "/boot/initramfs-$KERNEL_VERSION.img" "$KERNEL_VERSION"
        else
            echo "⚠️  Warning: No initramfs tool found. You may need to create initramfs manually."
        fi
        
        # Update bootloader
        echo "🥾 Updating bootloader..."
        if command -v update-grub >/dev/null 2>&1; then
            echo "   Using update-grub (Debian/Ubuntu)"
            update-grub
        elif command -v grub-mkconfig >/dev/null 2>&1; then
            echo "   Using grub-mkconfig"
            grub-mkconfig -o /boot/grub/grub.cfg
        elif command -v grub2-mkconfig >/dev/null 2>&1; then
            echo "   Using grub2-mkconfig (Fedora/RHEL)"
            grub2-mkconfig -o /boot/grub2/grub.cfg
        else
            echo "⚠️  Warning: No GRUB found. Please update your bootloader manually."
        fi
        
        echo
        echo "✅ Installation complete!"
        echo
        echo "🚀 Recommended kernel parameters:"
        echo "   mitigations=auto transparent_hugepage=madvise zswap.enabled=1"
        echo
        echo "🔄 Please reboot to use the new XYZVoid kernel."
        echo "   Your previous kernel is backed up in: $BACKUP_DIR"
        EOF
        
        chmod +x x86_64/install.sh
        
        # Create uninstall script
        cat > x86_64/uninstall.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        KERNEL_VERSION=$(ls "$SCRIPT_DIR/lib/modules/" | head -n1)
        
        echo "========================================"
        echo "  XYZVoid Kernel Uninstall Script"
        echo "========================================"
        echo "Kernel version: $KERNEL_VERSION"
        echo
        
        if [ "$EUID" -ne 0 ]; then
            echo "❌ Error: Please run as root (use sudo)"
            exit 1
        fi
        
        read -p "Are you sure you want to uninstall XYZVoid kernel? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Uninstall cancelled."
            exit 0
        fi
        
        echo "🗑️  Removing kernel files..."
        rm -f /boot/*xyzvoid-kernel* /boot/*$KERNEL_VERSION*
        rm -rf /lib/modules/$KERNEL_VERSION
        rm -rf /usr/src/linux-headers-$KERNEL_VERSION
        
        echo "🔧 Updating bootloader..."
        if command -v update-grub >/dev/null 2>&1; then
            update-grub
        elif command -v grub-mkconfig >/dev/null 2>&1; then
            grub-mkconfig -o /boot/grub/grub.cfg  
        elif command -v grub2-mkconfig >/dev/null 2>&1; then
            grub2-mkconfig -o /boot/grub2/grub.cfg
        fi
        
        echo "✅ XYZVoid kernel uninstalled successfully!"
        EOF
        
        chmod +x x86_64/uninstall.sh

    - name: Create optimized archives
      run: |
        cd kernel-build
        
        # Create ZSTD compressed archive (best compression, modern)
        echo "📦 Creating ZSTD archive..."
        tar --zstd -cf ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-x86_64-${{ env.KERNEL_DATE }}.tar.zst x86_64/
        
        # Create traditional gzip for compatibility
        echo "📦 Creating gzip archive..."
        tar -czf ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-x86_64-${{ env.KERNEL_DATE }}.tar.gz x86_64/
        
        # Generate checksums
        sha256sum *.tar.* > SHA256SUMS
        
        echo "=== Archive Information ==="
        ls -lah *.tar.*
        echo
        echo "=== Checksums ==="
        cat SHA256SUMS

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xyzvoid-kernel-x86_64-${{ env.KERNEL_DATE }}
        path: |
          kernel-build/*.tar.*
          kernel-build/SHA256SUMS
        retention-days: 30
        compression-level: 1

  create-release:
    needs: build-kernel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Setup release environment
      run: |
        echo "KERNEL_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_tag }}" ]; then
          echo "RELEASE_TAG=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=v6.15.0-xyzvoid-$(date +'%Y%m%d')" >> $GITHUB_ENV
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Organize release assets
      run: |
        mkdir -p release-files
        find release-artifacts -name "*.tar.*" -exec cp {} release-files/ \;
        find release-artifacts -name "SHA256SUMS" -exec cp {} release-files/ \;
        
        echo "=== Release Files ==="
        ls -la release-files/

    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # 🚀 XYZVoid Kernel ${{ env.RELEASE_TAG }}
        
        A high-performance, security-hardened Linux kernel optimized for modern x86_64 systems.
        
        ## 📋 Release Information
        
        | Field | Value |
        |-------|-------|
        | **Version** | Linux ${{ env.KERNEL_VERSION }} |
        | **Maintainer** | ${{ env.MAINTAINER }} |
        | **Build Date** | $(date -u +'%Y-%m-%d %H:%M:%S UTC') |
        | **Compiler** | Clang/LLVM ${{ env.LLVM_VERSION }} |
        | **Architecture** | x86_64 (generic 64-bit) |
        | **Target CPUs** | All x86_64 compatible processors |
        
        ## ✨ Key Features
        
        ### 🔒 Security Enhancements
        - **Control Flow Integrity (CFI)** - Advanced ROP/JOP attack prevention
        - **FORTIFY_SOURCE** - Enhanced buffer overflow detection
        - **Hardened Usercopy** - Kernel/userspace copy protection
        - **Stack Protection** - Strong stack smashing protection
        - **Memory Initialization** - Zero-on-alloc and free-on-free
        - **SLAB Randomization** - Randomized kernel memory allocator
        
        ### ⚡ Performance Optimizations
        - **x86_64 Generic** - Compatible with all 64-bit Intel/AMD processors
        - **Thin LTO** - Link-time optimization for better performance
        - **-O3 Compilation** - Maximum compiler optimization
        - **ZSWAP** - Compressed swap (LZ4, enabled by default)
        - **Transparent Huge Pages** - Always enabled for better memory efficiency
        - **High-Resolution Timers** - Precise timing for multimedia workloads
        
        ### 🎯 Kernel Configuration
        - **Preemptive Voluntary** - Balanced responsiveness and throughput
        - **Tickless Operation** - Reduced power consumption and latency
        - **ZSTD/LZ4 Compression** - Fast compression throughout the kernel
        - **Minimal Feature Set** - Audio, wireless, and non-essential drivers disabled
        - **DKMS Support** - Kernel headers included for third-party modules
        
        ## 📦 Downloads
        
        ### x86_64 (Intel/AMD 64-bit)
        - **ZSTD Archive** (Recommended): `xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst`
        - **GZIP Archive** (Compatibility): `xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.gz`
        - **Checksums**: `SHA256SUMS`
        
        ## 🖥️ System Requirements
        
        ### Minimum Requirements
        - **Architecture**: x86_64 (64-bit Intel/AMD)
        - **CPU**: Any x86_64 processor
        - **RAM**: 512MB minimum, 2GB+ recommended
        - **Storage**: 100MB for kernel package
        
        ### Optimal Performance
        - **CPU**: Any modern x86_64 processor
        - **RAM**: 4GB+ for best ZSWAP performance
        
        ## 🛠️ Quick Installation
        
        ```bash
        # Download the kernel package
        wget https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst
        
        # Extract and install
        tar --zstd -xf xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst
        cd x86_64
        sudo ./install.sh
        
        # Reboot to new kernel
        sudo reboot
        ```
        
        ## 🔍 Verification
        
        ```bash
        # Verify download integrity
        wget https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/SHA256SUMS
        sha256sum -c SHA256SUMS
        
        # Check kernel after reboot
        uname -r  # Should show: 6.15.y-xyzvoid-kernel
        
        # Verify optimizations
        zcat /proc/config.gz | grep -E "(LTO|CFI|ZSWAP)"
        ```
        
        ## 🎛️ Recommended Kernel Parameters
        
        Add to your bootloader configuration:
        ```
        mitigations=auto transparent_hugepage=madvise zswap.enabled=1 zswap.compressor=lz4 quiet splash
        ```
        
        ## 🆘 Support & Recovery
        
        ### Boot Issues
        1. Select previous kernel from GRUB menu
        2. Boot from live USB if necessary
        3. Use the included `uninstall.sh` script
        
        ### Getting Help
        - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
        - **Discussions**: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)
        
        ## ⚠️ Important Notes
        
        - **CPU Compatibility**: Generic x86_64 build for maximum compatibility
        - **Backup**: Always keep your original kernel as backup
        - **Testing**: Test in virtual machine first if possible
        - **Production**: Consider carefully for production servers
        
        ## 📄 License
        
        GPL v2.0 - Same as Linux kernel
        
        ---
        
        **Built with modern tooling: Clang/LLVM ${{ env.LLVM_VERSION }}, Ubuntu 24.04, GitHub Actions**
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "🚀 XYZVoid Kernel ${{ env.RELEASE_TAG }}"
        body_path: RELEASE_NOTES.md
        files: release-files/*
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build summary
      run: |
        echo "## 🎉 XYZVoid Kernel Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Release** | ${{ env.RELEASE_TAG }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Architecture** | x86_64 (generic) |" >> $GITHUB_STEP_SUMMARY
        echo "| **Compiler** | Clang/LLVM ${{ env.LLVM_VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Optimizations** | x86_64 generic, -O3, Thin LTO, CFI |" >> $GITHUB_STEP_SUMMARY
        echo "| **Download** | [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}) |" >> $GITHUB_STEP_SUMMARY
