name: Build XYZVoid Kernel

on:
  push:
    branches: [ linux-6.15.y ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ linux-6.15.y ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v6.15.0-xyzvoid.1)'
        required: false
        type: string
      enable_debug:
        description: 'Enable debug symbols'
        required: false
        type: boolean
        default: false

env:
  KERNEL_NAME: xyzvoid-kernel
  MAINTAINER: vxyzview
  KERNEL_VERSION: 6.15.y
  LLVM_VERSION: "20.1.6"
  CACHE_VERSION: v4

jobs:
  build-kernel:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 4096
        swap-size-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses-dev \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          bc \
          kmod \
          cpio \
          initramfs-tools \
          wget \
          xz-utils \
          zstd \
          ccache \
          python3-pip \
          rsync \
          pahole

    - name: Install LLVM/Clang ${{ env.LLVM_VERSION }} from GitHub
      run: |
        echo "Installing LLVM/Clang ${{ env.LLVM_VERSION }} from GitHub releases..."
        
        # Create installation directory
        sudo mkdir -p /opt/llvm
        cd /tmp
        
        # Download LLVM release
        LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.LLVM_VERSION }}/clang+llvm-${{ env.LLVM_VERSION }}-x86_64-linux-gnu-ubuntu-22.04.tar.xz"
        echo "Downloading from: $LLVM_URL"
        
        wget -O llvm.tar.xz "$LLVM_URL"
        
        # Extract and install
        sudo tar -xf llvm.tar.xz -C /opt/llvm --strip-components=1
        
        # Add to PATH and create symlinks
        echo "/opt/llvm/bin" | sudo tee -a /etc/environment
        export PATH="/opt/llvm/bin:$PATH"
        
        # Create system-wide symlinks
        sudo ln -sf /opt/llvm/bin/clang /usr/local/bin/clang
        sudo ln -sf /opt/llvm/bin/clang++ /usr/local/bin/clang++
        sudo ln -sf /opt/llvm/bin/ld.lld /usr/local/bin/ld.lld
        sudo ln -sf /opt/llvm/bin/llvm-ar /usr/local/bin/llvm-ar
        sudo ln -sf /opt/llvm/bin/llvm-nm /usr/local/bin/llvm-nm
        sudo ln -sf /opt/llvm/bin/llvm-strip /usr/local/bin/llvm-strip
        sudo ln -sf /opt/llvm/bin/llvm-objcopy /usr/local/bin/llvm-objcopy
        sudo ln -sf /opt/llvm/bin/llvm-ranlib /usr/local/bin/llvm-ranlib
        
        # Update library path
        echo "/opt/llvm/lib" | sudo tee /etc/ld.so.conf.d/llvm.conf
        sudo ldconfig
        
        # Verify installation
        echo "=== LLVM/Clang Installation Verification ==="
        /opt/llvm/bin/clang --version
        /opt/llvm/bin/ld.lld --version
        /opt/llvm/bin/llvm-ar --version
        
        # Update environment for subsequent steps
        echo "/opt/llvm/bin" >> $GITHUB_PATH
        echo "LLVM_INSTALLED_VERSION=${{ env.LLVM_VERSION }}" >> $GITHUB_ENV

    - name: Setup enhanced ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-x86_64-kernel-${{ env.LLVM_VERSION }}
        max-size: 4G
        save: true
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-x86_64-kernel-

    - name: Clone kernel source
      run: |
        git clone --depth=50 --branch=linux-6.15.y https://github.com/${{ github.repository_owner }}/${{ env.KERNEL_NAME }}.git kernel-source
        cd kernel-source
        echo "KERNEL_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "KERNEL_FULL_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "KERNEL_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Configure kernel for x86_64
      run: |
        cd kernel-source
        export PATH="/opt/llvm/bin:/usr/lib/ccache:$PATH"
        export CC="ccache clang"
        export CXX="ccache clang++"
        export HOSTCC="clang"
        export HOSTCXX="clang++"
        export LLVM=1
        export LLVM_IAS=1
        
        # Base configuration
        make ARCH=x86_64 defconfig
        LOCALVERSION_SUFFIX="-${{ env.KERNEL_NAME }}"
        
        # Performance and security optimizations
        scripts/config --set-str CONFIG_LOCALVERSION "$LOCALVERSION_SUFFIX"
        scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
        scripts/config --enable CONFIG_LTO_CLANG_THIN
        scripts/config --enable CONFIG_CFI_CLANG
        scripts/config --enable CONFIG_SHADOW_CALL_STACK
        scripts/config --enable CONFIG_FORTIFY_SOURCE
        scripts/config --enable CONFIG_STACKPROTECTOR_STRONG
        scripts/config --enable CONFIG_SLAB_FREELIST_RANDOM
        scripts/config --enable CONFIG_SHUFFLE_PAGE_ALLOCATOR
        
        # Performance features
        scripts/config --enable CONFIG_PREEMPT_VOLUNTARY
        scripts/config --enable CONFIG_NO_HZ_IDLE
        scripts/config --enable CONFIG_HIGH_RES_TIMERS
        scripts/config --enable CONFIG_TRANSPARENT_HUGEPAGE
        scripts/config --enable CONFIG_ZSTD_COMPRESS
        scripts/config --enable CONFIG_LZ4_COMPRESS
        scripts/config --enable CONFIG_ZRAM
        scripts/config --enable CONFIG_ZSWAP
        
        # x86_64 specific optimizations
        scripts/config --enable CONFIG_X86_64
        scripts/config --enable CONFIG_GENERIC_CPU
        scripts/config --enable CONFIG_X86_INTEL_PSTATE
        scripts/config --enable CONFIG_X86_AMD_PSTATE
        scripts/config --enable CONFIG_CPU_SUP_INTEL
        scripts/config --enable CONFIG_CPU_SUP_AMD
        
        # Debug configuration
        if [ "${{ github.event.inputs.enable_debug }}" = "true" ]; then
          scripts/config --enable CONFIG_DEBUG_INFO
          scripts/config --enable CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
        else
          scripts/config --disable CONFIG_DEBUG_INFO
          scripts/config --disable CONFIG_DEBUG_KERNEL
        fi
        
        # Disable unnecessary features for size optimization
        scripts/config --disable CONFIG_SOUND
        scripts/config --disable CONFIG_SND
        scripts/config --disable CONFIG_WIRELESS
        scripts/config --disable CONFIG_WLAN
        scripts/config --disable CONFIG_BLUETOOTH
        scripts/config --module CONFIG_DRM
        
        make olddefconfig
        
        # Verify important configs
        echo "=== Key Configuration Check ==="
        grep -E "(CONFIG_LOCALVERSION|CONFIG_LTO_CLANG|CONFIG_CFI_CLANG)" .config || true

    - name: Build kernel x86_64
      run: |
        cd kernel-source
        export PATH="/opt/llvm/bin:/usr/lib/ccache:$PATH"
        export CC="ccache clang"
        export CXX="ccache clang++"
        export HOSTCC="clang"
        export HOSTCXX="clang++"
        export LLVM=1
        export LLVM_IAS=1
        
        # Build with x86_64-v3 optimizations
        make ARCH=x86_64 \
             KCFLAGS="-O3 -march=x86-64-v3 -mtune=generic" \
             KCPPFLAGS="-O3" \
             -j$(nproc) \
             bzImage modules
        
        # Show build statistics
        echo "=== Build Statistics ==="
        ccache --show-stats || true
        ls -la arch/x86/boot/bzImage

    - name: Install modules and create package
      run: |
        cd kernel-source
        mkdir -p ../kernel-build/x86_64/{boot,lib/modules,usr/src}
        
        # Copy kernel image
        cp arch/x86/boot/bzImage ../kernel-build/x86_64/boot/vmlinuz-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        
        # Install modules
        make ARCH=x86_64 \
             INSTALL_MOD_PATH=../kernel-build/x86_64 \
             modules_install
        
        # Copy additional files
        cp .config ../kernel-build/x86_64/boot/config-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        cp System.map ../kernel-build/x86_64/boot/System.map-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        
        # Copy headers for DKMS modules
        make ARCH=x86_64 \
             INSTALL_HDR_PATH=../kernel-build/x86_64/usr \
             headers_install
        
        # Create kernel source symlink info
        KERNEL_VERSION_DIR=$(ls ../kernel-build/x86_64/lib/modules/)
        echo "kernel-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}" > ../kernel-build/x86_64/lib/modules/$KERNEL_VERSION_DIR/source
        echo "kernel-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}" > ../kernel-build/x86_64/lib/modules/$KERNEL_VERSION_DIR/build

    - name: Generate package metadata
      run: |
        cd kernel-build
        
        # Create detailed build info
        cat > x86_64/BUILD_INFO << EOF
        ================================
        XYZVoid Kernel Build Information
        ================================
        
        Kernel Name: ${{ env.KERNEL_NAME }}
        Version: ${{ env.KERNEL_VERSION }}
        Architecture: x86_64
        Maintainer: ${{ env.MAINTAINER }}
        
        Build Details:
        - Compiler: Clang/LLVM ${{ env.LLVM_VERSION }}
        - Build Date: ${{ env.BUILD_TIMESTAMP }}
        - Git Commit: ${{ env.KERNEL_FULL_COMMIT }}
        - Optimizations: -O3 -march=x86-64-v3 -mtune=generic
        - LTO: Thin LTO enabled
        - CFI: Control Flow Integrity enabled
        - Security: Stack protection, FORTIFY_SOURCE
        
        Features:
        - ZSTD/LZ4 compression support
        - Transparent huge pages
        - High-resolution timers
        - Preemptive scheduling
        - Enhanced security features
        - x86_64-v3 instruction set optimization
        
        Package Contents:
        - boot/: Kernel image, config, System.map
        - lib/modules/: Kernel modules
        - usr/include/: Kernel headers
        EOF
        
        # Create installation script
        cat > x86_64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        KERNEL_VERSION=$(ls "$SCRIPT_DIR/lib/modules/" | head -n1)
        
        echo "Installing XYZVoid Kernel x86_64..."
        echo "Kernel version: $KERNEL_VERSION"
        
        # Check if running as root
        if [ "$EUID" -ne 0 ]; then
            echo "Please run as root (use sudo)"
            exit 1
        fi
        
        # Check architecture
        if [ "$(uname -m)" != "x86_64" ]; then
            echo "Error: This kernel is built for x86_64 architecture only"
            echo "Your system architecture: $(uname -m)"
            exit 1
        fi
        
        # Backup current kernel (optional)
        read -p "Create backup of current kernel? [y/N]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mkdir -p /boot/backup-$(date +%Y%m%d)
            cp /boot/vmlinuz* /boot/backup-$(date +%Y%m%d)/ 2>/dev/null || true
            cp /boot/initrd* /boot/backup-$(date +%Y%m%d)/ 2>/dev/null || true
            echo "Backup created in /boot/backup-$(date +%Y%m%d)/"
        fi
        
        # Install kernel files
        echo "Installing kernel files..."
        cp -r boot/* /boot/
        cp -r lib/modules/* /lib/modules/
        cp -r usr/include/* /usr/include/ 2>/dev/null || true
        
        # Update initramfs
        echo "Updating initramfs..."
        if command -v update-initramfs >/dev/null 2>&1; then
            update-initramfs -c -k "$KERNEL_VERSION"
        elif command -v mkinitcpio >/dev/null 2>&1; then
            mkinitcpio -k "$KERNEL_VERSION" -g "/boot/initramfs-$KERNEL_VERSION.img"
        elif command -v dracut >/dev/null 2>&1; then
            dracut "/boot/initramfs-$KERNEL_VERSION.img" "$KERNEL_VERSION"
        else
            echo "Warning: No initramfs tool found. Manual initramfs creation may be required."
        fi
        
        # Update bootloader
        echo "Updating bootloader..."
        if command -v update-grub >/dev/null 2>&1; then
            update-grub
        elif command -v grub-mkconfig >/dev/null 2>&1; then
            grub-mkconfig -o /boot/grub/grub.cfg
        elif command -v grub2-mkconfig >/dev/null 2>&1; then
            grub2-mkconfig -o /boot/grub2/grub.cfg
        else
            echo "Warning: No GRUB found. Manual bootloader configuration may be required."
        fi
        
        echo ""
        echo "✅ Installation complete!"
        echo "📋 Installed kernel: $KERNEL_VERSION"
        echo "🔄 Please reboot to use the new kernel."
        echo ""
        echo "💡 Recommended kernel parameters:"
        echo "   mitigations=auto transparent_hugepage=madvise zswap.enabled=1"
        EOF
        
        chmod +x x86_64/install.sh

    - name: Create optimized archive
      run: |
        cd kernel-build
        
        # Create compressed archive with best compression
        echo "Creating ZSTD archive..."
        tar --zstd -cf ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-x86_64-${{ env.KERNEL_DATE }}.tar.zst x86_64/
        
        # Also create traditional gzip for compatibility
        echo "Creating GZIP archive..."
        tar -czf ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-x86_64-${{ env.KERNEL_DATE }}.tar.gz x86_64/
        
        # Generate checksums
        sha256sum *.tar.* > checksums-x86_64.sha256
        
        # Show archive info
        echo "=== Archive Information ==="
        ls -lah *.tar.*
        echo ""
        echo "=== Checksums ==="
        cat checksums-x86_64.sha256

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-x86_64-${{ env.KERNEL_DATE }}
        path: |
          kernel-build/*.tar.*
          kernel-build/checksums-*.sha256
        retention-days: 30
        compression-level: 1

  create-release:
    needs: build-kernel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Setup release environment
      run: |
        echo "KERNEL_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_tag }}" ]; then
          echo "RELEASE_TAG=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=v6.15.0-xyzvoid-$(date +'%Y%m%d')" >> $GITHUB_ENV
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Organize release assets
      run: |
        mkdir -p release-files
        find release-artifacts -name "*.tar.*" -exec cp {} release-files/ \;
        find release-artifacts -name "checksums-*.sha256" -exec cp {} release-files/ \;
        
        # Combine all checksums
        cat release-files/checksums-*.sha256 > release-files/SHA256SUMS
        rm release-files/checksums-*.sha256
        
        echo "=== Release Files ==="
        ls -la release-files/

    - name: Generate comprehensive release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # 🚀 XYZVoid Kernel ${{ env.RELEASE_TAG }}
        
        A high-performance, security-hardened Linux kernel based on the stable 6.15.y branch, optimized for x86_64 systems.
        
        ## 📋 Release Information
        
        | Field | Value |
        |-------|-------|
        | **Version** | Linux ${{ env.KERNEL_VERSION }} |
        | **Maintainer** | ${{ env.MAINTAINER }} |
        | **Build Date** | $(date -u +'%Y-%m-%d %H:%M:%S UTC') |
        | **Compiler** | Clang/LLVM ${{ env.LLVM_VERSION }} |
        | **Architecture** | x86_64 only |
        | **Target** | x86_64-v3 (modern CPUs) |
        
        ## ✨ Key Features
        
        ### 🔒 Security Enhancements
        - **Control Flow Integrity (CFI)** - Prevents ROP/JOP attacks
        - **Shadow Call Stack** - Additional return address protection  
        - **Stack Protection** - Strong stack smashing protection
        - **FORTIFY_SOURCE** - Enhanced buffer overflow detection
        - **SLAB Randomization** - Randomized memory allocator
        
        ### ⚡ Performance Optimizations
        - **Thin LTO** - Link-time optimization for better performance
        - **-O3 Optimization** - Maximum compiler optimization
        - **x86_64-v3 Target** - Modern CPU instruction support (AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE)
        - **ZSTD/LZ4 Compression** - Faster compression algorithms
        - **Transparent Huge Pages** - Improved memory management
        - **Intel/AMD P-State** - Advanced CPU frequency scaling
        
        ### 🎯 Kernel Features
        - **Preemptive Scheduling** - Better desktop responsiveness
        - **High-Resolution Timers** - Precise timing for multimedia
        - **Tickless Operation** - Reduced power consumption
        - **ZRAM/ZSWAP Support** - Compressed memory and swap
        
        ## 📦 Available Downloads
        
        ### x86_64 (Intel/AMD 64-bit)
        - `xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst` - ZSTD compressed (recommended)
        - `xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.gz` - GZIP compressed (compatibility)
        
        ### Checksums
        - `SHA256SUMS` - SHA256 checksums for all files
        
        ### System Requirements
        - **CPU**: x86_64 processor with x86_64-v3 support (Intel Haswell+ or AMD Excavator+)
        - **RAM**: Minimum 2GB (4GB+ recommended)
        - **Storage**: At least 500MB free space in /boot
        
        ## 🛠️ Installation Guide
        
        ### Quick Installation (Automated)
        ```bash
        # Download and extract the kernel package
        wget https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst
        tar --zstd -xf xyzvoid-kernel-6.15.y-x86_64-${{ env.KERNEL_DATE }}.tar.zst
        
        # Run the installation script
        cd x86_64
        sudo ./install.sh
        
        # Reboot to use the new kernel
        sudo reboot
        ```
        
        ### Manual Installation
        
        #### For Ubuntu/Debian:
        ```bash
        # Extract the package
        tar --zstd -xf xyzvoid-kernel-*.tar.zst
        cd x86_64
        
        # Install kernel files
        sudo cp boot/* /boot/
        sudo cp -r lib/modules/* /lib/modules/
        
        # Update initramfs
        KERNEL_VERSION=$(ls lib/modules/)
        sudo update-initramfs -c -k $KERNEL_VERSION
        
        # Update GRUB
        sudo update-grub
        sudo reboot
        ```
        
        #### For Fedora/RHEL/CentOS:
        ```bash
        # Extract the package
        tar --zstd -xf xyzvoid-kernel-*.tar.zst
        cd x86_64
        
        # Install kernel files
        sudo cp boot/* /boot/
        sudo cp -r lib/modules/* /lib/modules/
        
        # Update initramfs
        KERNEL_VERSION=$(ls lib/modules/)
        sudo dracut /boot/initramfs-$KERNEL_VERSION.img $KERNEL_VERSION
        
        # Update GRUB
        sudo grub2-mkconfig -o /boot/grub2/grub.cfg
        sudo reboot
        ```
        
        #### For Arch Linux:
        ```bash
        # Extract the package
        tar --zstd -xf xyzvoid-kernel-*.tar.zst
        cd x86_64
        
        # Install kernel files
        sudo cp boot/* /boot/
        sudo cp -r lib/modules/* /lib/modules/
        
        # Update initramfs
        KERNEL_VERSION=$(ls lib/modules/)
        sudo mkinitcpio -k $KERNEL_VERSION -g /boot/initramfs-$KERNEL_VERSION.img
        
        # Update bootloader (GRUB)
        sudo grub-mkconfig -o /boot/grub/grub.cfg
        sudo reboot
        ```
        
        ### Recommended Kernel Parameters
        Add these to your GRUB configuration for optimal performance:
        ```
        mitigations=auto
        transparent_hugepage=madvise  
        zswap.enabled=1
        zswap.compressor=lz4
        intel_pstate=active
        amd_pstate=active
        quiet splash
        ```
        
        ## 🔍 Verification
        
        ### Verify Download Integrity
        ```bash
        # Download checksums
        wget https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/SHA256SUMS
        
        # Verify checksum
        sha256sum -c SHA256SUMS
        ```
        
        ### Verify Installation
        ```bash
        # Check kernel version after reboot
        uname -r
        # Should show: 6.15.y-xyzvoid-kernel
        
        # Check compiler and optimization level
        cat /proc/version
        
        # Verify x86_64-v3 support
        lscpu | grep -E "(avx|avx2|fma)"
        
        # Check security features
        zcat /proc/config.gz | grep -E "(LTO|CFI|FORTIFY)"
        ```
        
        ## 🐛 Troubleshooting
        
        ### Boot Issues
        1. **Kernel panic**: Use previous kernel from GRUB menu
        2. **CPU not supported**: Your CPU may not support x86_64-v3 instructions
        3. **Missing modules**: Ensure initramfs was properly generated
        4. **Graphics issues**: Add `nomodeset` to kernel parameters temporarily
        
        ### CPU Compatibility Check
        ```bash
        # Check if your CPU supports x86_64-v3
        /lib64/ld-linux-x86-64.so.2 --help | grep "x86-64-v3 (supported"
        
        # Alternative check
        lscpu | grep -E "(avx|avx2|bmi1|bmi2|fma)"
        ```
        
        ### Recovery
        ```bash
        # Boot from live USB/rescue mode
        # Mount root filesystem
        sudo mount /dev/sdXY /mnt
        
        # Chroot into system
        sudo chroot /mnt
        
        # Remove problematic kernel
        rm /boot/*xyzvoid-kernel*
        rm -rf /lib/modules/*xyzvoid-kernel*
        
        # Update bootloader
        update-grub  # or grub-mkconfig
        ```
        
        ## 📞 Support
        
        - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
        - **Discussions**: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)
        - **Security**: Report security issues privately to ${{ env.MAINTAINER }}
        
        ## 📄 License
        
        This kernel is distributed under the GNU General Public License v2.0, same as the Linux kernel.
        
        ---
        
        **⚠️ Important Notes:**
        - This kernel requires x86_64-v3 compatible CPU (2013+ Intel/AMD)
        - Always backup your system before installing a custom kernel
        - Keep your previous kernel available for recovery
        - Test thoroughly before using in production
        
        **Built with ❤️ using GitHub Actions and LLVM/Clang ${{ env.LLVM_VERSION }}**
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "🚀 XYZVoid Kernel ${{ env.RELEASE_TAG }} (x86_64)"
        body_path: RELEASE_NOTES.md
        files: release-files/*
        draft: false
        prerelease: false
        make_latest: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release statistics
      run: |
        echo "::notice title=Release Created::XYZVoid Kernel ${{ env.RELEASE_TAG }} has been released successfully!"
        echo "::notice title=Architecture::Built for x86_64 only (x86_64-v3 optimized)"
        echo "::notice title=Compiler::Built with Clang/LLVM ${{ env.LLVM_VERSION }}"
        echo "::notice title=Download::https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}"
